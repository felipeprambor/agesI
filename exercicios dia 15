import React, { useState, useContext, createContext } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Trash2, Edit2, Check } from "lucide-react";

const TaskContext = createContext();

function TaskProvider({ children }) {
  const [tasks, setTasks] = useState([]);

  function addTask(title, category) {
    setTasks((prev) => [
      ...prev,
      { id: Date.now(), title, category, completed: false },
    ]);
  }

  function toggleTask(id) {
    setTasks((prev) =>
      prev.map((t) => (t.id === id ? { ...t, completed: !t.completed } : t))
    );
  }

  function deleteTask(id) {
    setTasks((prev) => prev.filter((t) => t.id !== id));
  }

  function editTask(id, newTitle) {
    setTasks((prev) =>
      prev.map((t) => (t.id === id ? { ...t, title: newTitle } : t))
    );
  }

  return (
    <TaskContext.Provider value={{ tasks, addTask, toggleTask, deleteTask, editTask }}>
      {children}
    </TaskContext.Provider>
  );
}

function useTasks() {
  return useContext(TaskContext);
}

function TaskForm() {
  const { addTask } = useTasks();
  const [title, setTitle] = useState("");
  const [category, setCategory] = useState("");

  function handleSubmit(e) {
    e.preventDefault();
    if (title && category) {
      addTask(title, category);
      setTitle("");
      setCategory("");
    }
  }

  return (
    <form onSubmit={handleSubmit} className="flex gap-2 mb-4">
      <Input
        placeholder="Tarefa"
        value={title}
        onChange={(e) => setTitle(e.target.value)}
      />
      <Input
        placeholder="Categoria"
        value={category}
        onChange={(e) => setCategory(e.target.value)}
      />
      <Button type="submit">Adicionar</Button>
    </form>
  );
}

function TaskList() {
  const { tasks, toggleTask, deleteTask, editTask } = useTasks();
  const [editing, setEditing] = useState(null);
  const [newTitle, setNewTitle] = useState("");

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
      <AnimatePresence>
        {tasks.map((task) => (
          <motion.div
            key={task.id}
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
          >
            <Card className={`p-4 ${task.completed ? "bg-green-100" : "bg-white"}`}>
              <CardContent className="flex justify-between items-center">
                {editing === task.id ? (
                  <Input
                    value={newTitle}
                    onChange={(e) => setNewTitle(e.target.value)}
                  />
                ) : (
                  <span className={task.completed ? "line-through" : ""}>
                    {task.title} - <small>{task.category}</small>
                  </span>
                )}
                <div className="flex gap-2">
                  {editing === task.id ? (
                    <Button
                      size="icon"
                      onClick={() => {
                        editTask(task.id, newTitle);
                        setEditing(null);
                      }}
                    >
                      <Check size={16} />
                    </Button>
                  ) : (
                    <Button
                      size="icon"
                      onClick={() => {
                        setEditing(task.id);
                        setNewTitle(task.title);
                      }}
                    >
                      <Edit2 size={16} />
                    </Button>
                  )}
                  <Button size="icon" onClick={() => toggleTask(task.id)}>
                    âœ“
                  </Button>
                  <Button size="icon" variant="destructive" onClick={() => deleteTask(task.id)}>
                    <Trash2 size={16} />
                  </Button>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        ))}
      </AnimatePresence>
    </div>
  );
}

export default function App() {
  return (
    <TaskProvider>
      <div className="max-w-2xl mx-auto p-4">
        <h1 className="text-2xl font-bold mb-4">Dashboard de Tarefas</h1>
        <TaskForm />
        <TaskList />
      </div>
    </TaskProvider>
  );
}

